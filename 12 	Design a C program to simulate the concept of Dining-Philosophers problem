// Task 12: Dining-Philosophers Problem
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM 5

sem_t mutex;
sem_t chopstick[NUM];

void *philosopher(void *num) {
    int id = *(int *)num;
    while (1) {
        sem_wait(&mutex);
        sem_wait(&chopstick[id]);
        sem_wait(&chopstick[(id + 1) % NUM]);
        
        printf("Philosopher %d is eating.\n", id);
        sleep(1);
        
        sem_post(&chopstick[(id + 1) % NUM]);
        sem_post(&chopstick[id]);
        sem_post(&mutex);
        
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
    }
}

int main() {
    pthread_t philosophers[NUM];
    int id[NUM];
    sem_init(&mutex, 0, 1);
    
    for (int i = 0; i < NUM; i++) {
        id[i] = i;
        sem_init(&chopstick[i], 0, 1);
        pthread_create(&philosophers[i], NULL, philosopher, &id[i]);
    }
    
    for (int i = 0; i < NUM; i++) {
        pthread_join(philosophers[i], NULL);
    }
    
    return 0;
}
